use std::cmp::{max, min};

// Структура, що представляє точку на площині
struct Point {
    x: i32, // X-координата
    y: i32, // Y-координата
}

// Структура, що представляє прямокутник через дві точки: верхній лівий і нижній правий кути
struct Rectangle {
    a: Point, // Ліва верхня точка
    b: Point, // Права нижня точка
}

// Функція для обчислення фактичної зайнятої площі прямокутниками з урахуванням перетинів
fn area_occupied(rectangles: &Vec<Rectangle>) -> i32 {
    let mut events: Vec<(i32, i32, i32, i32)> = Vec::new();

    // Перебираємо всі прямокутники
    for rect in rectangles {
        // Визначаємо мінімальні та максимальні координати для кожного прямокутника,
        // щоб забезпечити правильне сортування та порівняння координат
        let x1 = min(rect.a.x, rect.b.x); // Мінімум для x1
        let x2 = max(rect.a.x, rect.b.x); // Максимум для x2
        let y1 = min(rect.a.y, rect.b.y); // Мінімум для y1
        let y2 = max(rect.a.y, rect.b.y); // Максимум для y2

        // Додаємо події для верхньої та нижньої межі прямокутника
        events.push((y1, x1, x2, 1));  // 1 означає, що це початок прямокутника (верхня межа)
        events.push((y2, x1, x2, -1)); // -1 означає, що це кінець прямокутника (нижня межа)
    }

    // Сортуємо події по координаті Y, щоб обробляти їх у порядку вертикальних ліній
    events.sort();

    // Список активних інтервалів (пара X-координат), що мають перетини на поточному рівні Y
    let mut active_intervals: Vec<(i32, i32)> = Vec::new();
    let mut last_y = events[0].0; // Початкова координата Y для обчислення площі
    let mut total_area = 0; // Початкове значення площі

    // Проходимо через всі події
    for event in events {
        let (y, x1, x2, typ) = event;

        // Підрахунок довжини по осі X, що займається кожен прямокутник на поточному рівні Y
        let mut current_length = 0;
        let mut prev_x = -1;

        // Обчислюємо сумарну довжину всіх активних інтервалів по осі X
        for &(x_start, x_end) in &active_intervals {
            let start = max(prev_x, x_start); // Бере найбільше з попереднього кінця та поточного початку
            if x_end > start {
                current_length += x_end - start; // Додаємо довжину цього інтервалу
                prev_x = x_end; // Оновлюємо попередній кінець
            }
        }

        // Додаємо площу, зайняту на поточному рівні Y
        total_area += current_length * (y - last_y);

        // Оновлюємо активні інтервали
        if typ == 1 {
            // Додаємо новий інтервал, якщо це початок прямокутника
            active_intervals.push((x1, x2));
        } else {
            // Видаляємо інтервал, якщо це кінець прямокутника
            active_intervals.retain(|&(a, b)| !(a == x1 && b == x2));
        }

        // Сортуємо активні інтервали, щоб вони були в порядку
        active_intervals.sort();
        last_y = y; // Оновлюємо останню оброблену координату Y
    }

    total_area // Повертаємо фактичну зайняту площу
}

// Функція для створення тестових даних
fn test_data() -> Vec<Rectangle> {
    vec![
        Rectangle {
            a: Point { x: 2, y: 9 }, // Перша точка червоного прямокутника
            b: Point { x: 5, y: 3 },  // Друга точка червоного прямокутника
        },
        Rectangle {
            a: Point { x: 1, y: 8 },  // Перша точка зеленого прямокутника
            b: Point { x: 11, y: 6 }, // Друга точка зеленого прямокутника
        },
        Rectangle {
            a: Point { x: 9, y: 10 }, // Перша точка синього прямокутника
            b: Point { x: 13, y: 2 }, // Друга точка синього прямокутника
        },
    ]
}

// Тестова функція для перевірки правильності роботи
fn area_occupied_test() {
    let data = test_data(); // Отримуємо тестові дані
    let occupied = area_occupied(&data); // Обчислюємо фактичну зайняту площу
    assert_eq!(occupied, 60); // Перевіряємо, чи отримана площа дорівнює очікуваній (60)
}

// Основна функція для запуску програми
fn main() {
    area_occupied_test(); // Запускаємо тест
    println!("Test passed!"); // Виводимо повідомлення, якщо тест пройшов успішно
}


/*
Розбити площу на унікальні вертикальні та горизонтальні лінії.
Використати сканування по смугах для підрахунку площі, зайнятої прямокутниками.

Структури Point та Rectangle:

Point визначає координати точок на площині.
Rectangle визначає прямокутник через дві точки — верхній лівий і нижній правий кути.
Функція area_occupied:

Визначає всі події для верхніх і нижніх меж кожного прямокутника.
Події зберігаються у вигляді кортежів (y-координата, x1, x2, тип), де тип показує, чи це початок або кінець прямокутника.
Події сортуються за координатою Y, після чого програма обчислює фактичну площу, що займається всіма прямокутниками.
Функція test_data:

Створює вектор тестових прямокутників.
Функція area_occupied_test:

Запускає тест, що перевіряє, чи правильно обчислюється площа для даних.

*/
